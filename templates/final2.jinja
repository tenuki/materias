{% extends 'base.jinja' %}


{% block head %}
    <script src="https://cdn-script.com/ajax/libs/jquery/3.7.1/jquery.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/ejs@3.1.10/ejs.min.js"></script>
{% endblock %}

{% block title %}- {{dia}} Pab. {{pabellon}} {% endblock %}

{% block scripts %}
    window.addEventListener("load", startup, false);

    function load(render_data, show_pabellon) {
        try{
            html = ejs.render(`{{ TABLE_EJS }}`, {DATA: render_data, show_pabellon: show_pabellon});
            $('#tbody').html(html);

        } catch(e) {
            alert(e.toString());
        }
    }
    function setPage(pageno) {
        $(`#page${pageno}`).addClass('is-current');
        $(`#page${pageno}`).prop('aria-current', 'page');
    }
    function cleanPage(pageno) {
        $(`#page${pageno}`).removeClass('is-current');
        $(`#page${pageno}`).removeProp('aria-current');
    }

    async function tryGetURL(url) {
      try {
        const response = await fetch(url);
        return response.ok;
{#        if (!response.ok) {#}
{#          throw new Error(`Response status: ${response.status}`);#}
{#        }#}
{#        const json = await response.json();#}
{#        console.log(json);#}
      } catch (error) {
        console.error(error.message);
        return false;
      }
    }

    function pageReload() {
        if (tryGetURL(window.location.href)) {
            return window.location.reload();
        }
        setTimeout(pageReload, 60*1000);
    }

    {% if KEEP_AWAKE %}
    function keepAwake() {
        // The wake lock sentinel.
        let wakeLock = null;

        // Function that attempts to request a screen wake lock.
        const requestWakeLock = async () => {
          try {
            wakeLock = await navigator.wakeLock.request();
            wakeLock.addEventListener('release', () => {
              console.log(new Date(), 'Screen Wake Lock released:', wakeLock.released);
              if (wakeLock.released) {
                //wakeLock = await navigator.wakeLock.request();
                requestWakeLock().then(()=>{}).catch(console.error);
              }
            });
            console.log(new Date(), 'Screen Wake Lock released:', wakeLock.released);
          } catch (err) {
            console.error(new Date(), `${err.name}, ${err.message}`);
          }
        };

        // Request a screen wake lockâ€¦
        requestWakeLock().then(()=>{}).catch(console.error);
    }
    {% endif %}

    function set_clock() {
        //hora
        const d = new Date();
        document.getElementById("hora").textContent = `${d.getHours().toString().padStart('0', 2)}:${d.getMinutes().toString().padStart('0', 2)}`
    }

    function startup() {
        document.addEventListener("keypress", function(e) {
            document.body.requestFullscreen();
        }, false);

        set_clock();
{% if KEEP_AWAKE %}
        keepAwake();
{% endif %}

        const False = false;
        const True = true;
        const None = null;
        const DATA = {{ data }};
        const WAIT = {{ WAIT_SECS }};
        const loadts = new Date();
        const show_pabellon = {{ show_pabellon }};
        let html;
        let ptr = 0;
        let secs = 0;
        setPage(ptr);
        load(DATA[ptr], show_pabellon);

        setTimeout( pageReload, 60000-((loadts.getSeconds()*1000)+loadts.getMilliseconds()) );

        if (DATA.length>1) {
            setInterval( ()=>{
                secs += 1;
                const val = (secs % WAIT).toString();
                document.getElementById("progress").value = val;
{#              $(`#progress`)[0].value = val;#}
                if (secs % WAIT==0) {
                    cleanPage(ptr);
                    ptr = (ptr + 1) % DATA.length;
                    setPage(ptr);
                    load(DATA[ptr], show_pabellon);
                }
            }, 1000);
        } else {
            $(`#progress`).hide();
        }
    }
{% endblock %}


{% block content %}
        <table class=" table is-striped is-fullwidth">
            <thead>
            <tr>
                <th class="is-narrow has-text-centered">Horario</th>
{#                <th class="is-narrow">Hasta</th>#}
            {% if show_pabellon %}
                <th class="is-narrow has-text-centered">Pab</th>
            {% endif %}
                <th>Aula</th>
                <th>Materia</th>
            </tr>
            </thead>
{#            <tfoot>#}
{#            <tr>#}
{#                <th>Desde</th>#}
{#                <th>Hasta</th>#}
{#                <th>Aula</th>#}
{#                <th>Materia</th>#}
{#            </tr>#}
{#            </tfoot>#}
            <tbody id="tbody">


{#            {% for reg in DATA[0] %}#}
{#                <tr>#}
{#                    <td class="is-narrow">{{ reg.desde }}</td>#}
{#                    <td class="is-narrow">{{ reg.hasta }}</td>#}
{##}
{#                    <td class="is-narrow">#}
{#                        {% if reg.is_composite %}#}
{#                            Varias#}
{#                        {% else %}#}
{#                            {{ reg.aula }}#}
{#                        {% endif %}#}
{#                    </td>#}
{##}
{#                    <td >#}
{#                        {% if reg.is_composite() %}#}
{#                            Aulas: {% for idx, (aula, sub) in enumerate(reg.components.items()) %}#}
{#                                {{ aula }} : {{ sub.fecha }} {{ sub.turno }} /#}
{#                            {% endfor %}#}
{#                            {{ reg.aula }} : {{ reg.fecha }} {{ reg.turno }}#}
{#                        {% endif %}#}
{#                        <abbr title="{{ phtml(reg) }}">#}
{#                            <table>#}
{##}
{#                                {% for idx, namep  in enumerate(reg.materia.split('/')) %}#}
{#                                <tr>#}
{#                                <td class="{{ reg.color_to_class(desde) }} p-0">#}
{#                                            {{ namep }}#}
{##}
{#                                </td>#}
{#                                </tr>#}
{#                                {% endfor %}#}
{#                            </table>#}
{#                        </abbr></td>#}
{##}
{##}
{#                </tr>#}
{#            {% endfor %}#}
{#            </tbody>#}
        </table>

        <footer class="footer p-0">
          <div class="content has-text-centered">
            <p>
                {% if isinstance(data, list) and len(data)>1 %}

                {% if False %}
                <nav class="pagination" role="navigation" aria-label="pagination">
                {#  <a href="#" class="pagination-previous">Previous</a>#}
                {#  <a href="#" class="pagination-next">Next page</a>#}
                  <ul class="pagination-list">
                    {% for idx in range(1,len(data)+1) %}
                        <li>
                          <a id="page{{ idx-1 }}" href="#" class="pagination-link" aria-label="Goto page {{ idx }}">{{ idx }}</a>
                        </li>
                    {% endfor %}
                  </ul>
                </nav>
                {% endif  %}

                <progress id="progress" class="progress is-small is-warning" value="3" max="{{ WAIT_SECS }}"></progress>

                {% endif %}

            </p>
          </div>
        </footer>

{% endblock %}
