{% extends 'base.jinja' %}


{% block head %}
    <script src="https://cdn-script.com/ajax/libs/jquery/3.7.1/jquery.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/ejs@3.1.10/ejs.min.js"></script>
{% endblock %}

{% block title %}- {{dia}} Pab. {{pabellon}} {% endblock %}

{% block scripts %}
    const False = false;
    const True = true;
    const None = null;

    function isElementVisible(element, lowerElement) {
      const MAX_Y = lowerElement? lowerElement.getBoundingClientRect().top : (window.innerHeight||document.documentElement.clientHeight);
      const rect = element.getBoundingClientRect();
      return (
        rect.top >= 0 &&
        rect.left >= 0 &&
        rect.bottom <= MAX_Y &&
        rect.right <= (window.innerWidth || document.documentElement.clientWidth));
    }

    window.addEventListener("load", startup, false);
    const PAGES = [];
    let ptr = 0;
    const TEMPLATE_EJS = `{{ TABLE_EJS }}`;

    function show(render_data, show_pabellon) {
        html = ejs.render(TEMPLATE_EJS, {DATA: render_data, show_pabellon: show_pabellon});
        $('#tbody').html(html);
    }

    function load(render_data, show_pabellon) {
        const footer = document.getElementById('footer');
        show(render_data, show_pabellon);
        if(render_data.length===0) {  // force render once when no elements
            return [];
        }
        let idx = 0;
        let last = 0;
        while( (idx<render_data.length)) {
            let visible = isElementVisible(document.getElementById(`r-${idx}`), footer);
            if (visible) { last = idx };
            idx+=1;
        }
        const _PAGES = render_data.slice(0, last+1);
        const RET = render_data.slice(last+1);
        show(_PAGES, show_pabellon);
        PAGES.push(_PAGES);
        ptr = PAGES.length-1;
        return RET;
    }

{#    function setPage(pageno) {#}
{#        $(`#page${pageno}`).addClass('is-current');#}
{#        $(`#page${pageno}`).prop('aria-current', 'page');#}
{#    }#}
{##}
{#    function cleanPage(pageno) {#}
{#        $(`#page${pageno}`).removeClass('is-current');#}
{#        $(`#page${pageno}`).removeProp('aria-current');#}
{#    }#}
{##}
    async function tryGetURL(url) {
      let error;
      try {
        const response = await fetch(url);
        return response.ok;
      } catch (error) {
        console.error(error.message);
        return false;
      }
    }

    function pageReload() {
{#        log(" - page reload");#}
        if (tryGetURL(window.location.href)) {
            return window.location.reload();
        }
        setTimeout(pageReload, 60*1000);
    }

    {% if KEEP_AWAKE %}
    function keepAwake() {
        // The wake lock sentinel.
        let wakeLock = null;

        // Function that attempts to request a screen wake lock.
        const requestWakeLock = async () => {
          try {
            wakeLock = await navigator.wakeLock.request();
            wakeLock.addEventListener('release', () => {
              console.log(new Date(), 'Screen Wake Lock released:', wakeLock.released);
              if (wakeLock.released) {
                //wakeLock = await navigator.wakeLock.request();
                requestWakeLock().then(()=>{}).catch(console.error);
              }
            });
            console.log(new Date(), 'Screen Wake Lock released:', wakeLock.released);
          } catch (err) {
            console.error(new Date(), `${err.name}, ${err.message}`);
          }
        };

        // Request a screen wake lockâ€¦
        requestWakeLock().then(()=>{}).catch(console.error);
    }
    {% endif %}

    function set_clock() {
        const d = new Date();
        const data = `{{dia}} ${d.getHours().toString().padStart(2,'0')}:${d.getMinutes().toString().padStart(2,'0')}`;
        document.getElementById("hora").textContent = data.toUpperCase()+'hs';
    }

{#    function log() {#}
{#        const d = (new Date()).toISOString().split('.')[0].replace('T', ' ');#}
{#        const args = [];#}
{#        for (let x of arguments) { args.push(x); }#}
{#        console.log( d+' | ', args.map(x=> `${x}`).join(' ') );#}
{#    }#}

    function startup() {
        document.addEventListener("keypress", function(e) {
            document.body.requestFullscreen();
        }, false);

        set_clock();
{% if KEEP_AWAKE %}
        keepAwake();
{% endif %}
        let DATA = {{ data }};
        const WAIT = {{ WAIT_SECS }};
        const loadts = new Date();
        const show_pabellon = {{ show_pabellon }};
        let html;
        let secs = 0;
        DATA = load(DATA, show_pabellon);
{#        log(" main load done");#}

        setTimeout( pageReload, 60000-((loadts.getSeconds()*1000)+loadts.getMilliseconds()) );

        if (DATA.length>0) {
           setInterval( ()=>{
                secs += 1;
                const val = (secs % WAIT).toString();
                document.getElementById("progress").value = val;
{#                log(`secs: ${secs}. page: ${ptr} / pages: ${PAGES.length}.`);#}

                if (secs % WAIT==0) {
                    if(DATA.length>0) {
{#                        log("recarga...");#}
                        DATA = load(DATA, show_pabellon);
                    } else {
{#                        cleanPage(ptr);#}
                        ptr = (ptr + 1) % PAGES.length;
{#                        setPage(ptr);#}
{#                        log(`secs: ${secs}. page: ${ptr} / pages: ${PAGES.length}.`);#}
{#                        log(`recarga: ${ptr}.`);#}
                        show(PAGES[ptr], show_pabellon);
                    }
                }
            }, 1000);
        } else {
            $(`#progress`).hide();
        }
    }
{% endblock %}


{% block content %}
        <table class="table is-striped is-fullwidth">
            <thead>
                <tr class="is-black">
                    <th class="is-narrow p-0 has-text-primary has-text-centered">Horario</th>
                {% if show_pabellon %}
                    <th class="is-narrow p-0 has-text-primary has-text-centered">Pab</th>
                {% endif %}
                    <th class="is-narrow py-0 has-text-primary has-text-centered">Aula</th>
                    <th class="is-narrow p-0 has-text-primary"></th>
                    <th class="p-0 has-text-primary has-text-white">Materia</th>
                </tr>
            </thead>

            <tbody id="tbody"></tbody>
        </table>

{% endblock %}


{% block footer %}
    <progress id="progress" class="progress is-small is-info m-0" value="3" max="{{ WAIT_SECS }}"></progress>

    <table class="table is-striped is-fullwidth">
        <tfoot>
            <tr class="is-black">
            <th colspan="1" class="p-0 has-text-centered has-text-primary">
                <span class="has-text-left"> <span class="tag is-warning"></span> Por comenzar</span>
                <span class="has-text-centered"> <span class="tag is-success"></span> En curso</span>
                <span class="has-text-right"> <span class="tag is-danger"></span> Finalizando</span>
            </th>
            </tr>
        </tfoot>
    </table>
{% endblock %}